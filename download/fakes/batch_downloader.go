// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cavaliercoder/grab"
	"github.com/pivotal-cf/go-pivnet/download"
)

type BatchDownloader struct {
	DoStub        func(...*grab.Request) download.ErrorDownload
	doMutex       sync.RWMutex
	doArgsForCall []struct {
		arg1 []*grab.Request
	}
	doReturns struct {
		result1 download.ErrorDownload
	}
	doReturnsOnCall map[int]struct {
		result1 download.ErrorDownload
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *BatchDownloader) Do(arg1 ...*grab.Request) download.ErrorDownload {
	fake.doMutex.Lock()
	ret, specificReturn := fake.doReturnsOnCall[len(fake.doArgsForCall)]
	fake.doArgsForCall = append(fake.doArgsForCall, struct {
		arg1 []*grab.Request
	}{arg1})
	fake.recordInvocation("Do", []interface{}{arg1})
	fake.doMutex.Unlock()
	if fake.DoStub != nil {
		return fake.DoStub(arg1...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.doReturns.result1
}

func (fake *BatchDownloader) DoCallCount() int {
	fake.doMutex.RLock()
	defer fake.doMutex.RUnlock()
	return len(fake.doArgsForCall)
}

func (fake *BatchDownloader) DoArgsForCall(i int) []*grab.Request {
	fake.doMutex.RLock()
	defer fake.doMutex.RUnlock()
	return fake.doArgsForCall[i].arg1
}

func (fake *BatchDownloader) DoReturns(result1 download.ErrorDownload) {
	fake.DoStub = nil
	fake.doReturns = struct {
		result1 download.ErrorDownload
	}{result1}
}

func (fake *BatchDownloader) DoReturnsOnCall(i int, result1 download.ErrorDownload) {
	fake.DoStub = nil
	if fake.doReturnsOnCall == nil {
		fake.doReturnsOnCall = make(map[int]struct {
			result1 download.ErrorDownload
		})
	}
	fake.doReturnsOnCall[i] = struct {
		result1 download.ErrorDownload
	}{result1}
}

func (fake *BatchDownloader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.doMutex.RLock()
	defer fake.doMutex.RUnlock()
	return fake.invocations
}

func (fake *BatchDownloader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
