// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cavaliercoder/grab"
)

type DownloadClient struct {
	DoBatchStub        func(int, ...*grab.Request) <-chan *grab.Response
	doBatchMutex       sync.RWMutex
	doBatchArgsForCall []struct {
		arg1 int
		arg2 []*grab.Request
	}
	doBatchReturns struct {
		result1 <-chan *grab.Response
	}
	doBatchReturnsOnCall map[int]struct {
		result1 <-chan *grab.Response
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *DownloadClient) DoBatch(arg1 int, arg2 ...*grab.Request) <-chan *grab.Response {
	fake.doBatchMutex.Lock()
	ret, specificReturn := fake.doBatchReturnsOnCall[len(fake.doBatchArgsForCall)]
	fake.doBatchArgsForCall = append(fake.doBatchArgsForCall, struct {
		arg1 int
		arg2 []*grab.Request
	}{arg1, arg2})
	fake.recordInvocation("DoBatch", []interface{}{arg1, arg2})
	fake.doBatchMutex.Unlock()
	if fake.DoBatchStub != nil {
		return fake.DoBatchStub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.doBatchReturns.result1
}

func (fake *DownloadClient) DoBatchCallCount() int {
	fake.doBatchMutex.RLock()
	defer fake.doBatchMutex.RUnlock()
	return len(fake.doBatchArgsForCall)
}

func (fake *DownloadClient) DoBatchArgsForCall(i int) (int, []*grab.Request) {
	fake.doBatchMutex.RLock()
	defer fake.doBatchMutex.RUnlock()
	return fake.doBatchArgsForCall[i].arg1, fake.doBatchArgsForCall[i].arg2
}

func (fake *DownloadClient) DoBatchReturns(result1 <-chan *grab.Response) {
	fake.DoBatchStub = nil
	fake.doBatchReturns = struct {
		result1 <-chan *grab.Response
	}{result1}
}

func (fake *DownloadClient) DoBatchReturnsOnCall(i int, result1 <-chan *grab.Response) {
	fake.DoBatchStub = nil
	if fake.doBatchReturnsOnCall == nil {
		fake.doBatchReturnsOnCall = make(map[int]struct {
			result1 <-chan *grab.Response
		})
	}
	fake.doBatchReturnsOnCall[i] = struct {
		result1 <-chan *grab.Response
	}{result1}
}

func (fake *DownloadClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.doBatchMutex.RLock()
	defer fake.doBatchMutex.RUnlock()
	return fake.invocations
}

func (fake *DownloadClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
